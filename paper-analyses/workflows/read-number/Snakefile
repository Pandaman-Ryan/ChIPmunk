# Import most functionality from top level snakefile
# Here we just define the parameters that change and generate the params files
#
# Simulated Peak files to use for evaluation
#/storage/pandaman/project/ChIPs-experiments/data/TF-SP1-sim.bed
#/storage/pandaman/project/ChIPs-experiments/data/HM-H3K27ac-sim.bed

config["LAYOUT"] = "paired"
config["REF"] = "/storage/resources/dbase/human/hg19/hg19.fa"
config["ENCODE"] = ""
config["ENCDIR"] = ""
config["REGION"] = "chr21:1-48129895"
#config["PEAKFILE"] = "/storage/pandaman/project/ChIPs-experiments/data/TF-SP1-sim.bed"
config["PEAKFILE"] = "/storage/pandaman/project/ChIPs-experiments/data/HM-H3K27ac-sim.bed"
config["MODELFILE"] = "params/simplified_GM12878_H3K27ac.json"
#config["MODELFILE"] = "params/simplified_GM12878_CTCF.json"
config["C"] = 4

include: "../Snakefile"

NUMREADS = [100, 1000, 10000, 100000, 1000000]

rule all:
    input:
        "summary_stats_readnum.tab"

rule create_params_file:
    output:
        "params/numreads{numreads,\d+}.params"
    shell:
        "echo --scale-outliers -c {config[C]} --numcopies 1000 --thread 4 --numreads {wildcards.numreads} --readlen 36 > {output}"

rule summarize_all:
    input:
        expand("metrics/numreads{numreads}.final.tab", numreads=NUMREADS)
    output:
        "summary_stats_readnum.tab"
    run:
       shell("head -n 1 {input[0]} | awk '{{print \"numreads\\t\" $0}}' >> {output}")
       for nr in NUMREADS:
           shell("tail -n 1 metrics/numreads%s.final.tab | awk '{{print \"%s\\t\" $0}}' >> {output}"%(nr, nr))
